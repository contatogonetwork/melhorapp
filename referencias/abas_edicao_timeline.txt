EXECUTE




Segue  **prompt t√©cnico final, robusto e detalhado**, integrando e aprimorando as abas **BRIEFING** e **TIMELINE** com base no que j√° foi implementado na ferramenta GoNetwork AI, respeitando integralmente o que j√° existe e se integrando harmonicamente com as demais abas do sistema. 

---

# üìå **PROMPT FINAL EXTREMAMENTE DETALHADO PARA IMPLEMENTA√á√ÉO DAS ABAS BRIEFING E TIMELINE**

Este documento cont√©m instru√ß√µes altamente detalhadas e t√©cnicas para serem executadas diretamente no VSCode para implementar melhorias nas abas **Briefing** e **Timeline** da ferramenta GoNetwork AI, com base na estrutura j√° existente, integrada de forma limpa e fluida com as demais abas.

---

## üö® **IMPORTANTE: REGRAS ABSOLUTAS DE IMPLEMENTA√á√ÉO**

* **N√ÉO MODIFIQUE NADA AL√âM DO DESCRITO AQUI**.
* **N√ÉO EXCLUA OU ALTERE FUNCIONALIDADES EXISTENTES FORA DESTE ESCOPO**.
* Apenas implementar e ajustar as abas **BRIEFING** e **TIMELINE** conforme estas especifica√ß√µes.
* **Garanta que as intera√ß√µes com outras abas sejam via utiliza√ß√£o de m√©todos e reposit√≥rios existentes.**

---

## üìÅ **Estrutura de Diret√≥rios (OBRIGAT√ìRIA)**

```bash
melhorapp/
‚îú‚îÄ‚îÄ gui/widgets/
‚îÇ   ‚îú‚îÄ‚îÄ briefing_widget.py
‚îÇ   ‚îî‚îÄ‚îÄ timeline_widget.py
‚îú‚îÄ‚îÄ core/repositories/
‚îÇ   ‚îú‚îÄ‚îÄ BriefingRepository.py
‚îÇ   ‚îî‚îÄ‚îÄ TimelineRepository.py
‚îî‚îÄ‚îÄ database/schema/
    ‚îú‚îÄ‚îÄ briefing_tables.sql
    ‚îî‚îÄ‚îÄ timeline_events.sql
```

---

# üîπ **ABA BRIEFING ‚Äì Implementa√ß√£o Detalhada**

**Finalidade:** Centraliza√ß√£o estrat√©gica completa dos eventos audiovisuais, alimentando diretamente as abas Timeline, Edi√ß√µes, Entregas e Equipe.

## **1. BriefingWidget (GUI)**

* `briefing_widget.py`
* `BriefingWidget(QWidget)`

### ‚úÖ **Estrutura da Interface (QTabWidget)**:

* **Seletor de Evento (`QComboBox`)**: obrigatoriamente conectado ao estado global do evento selecionado.
* **Informa√ß√µes Gerais (`QTextEdit`)**
* **Estilo e Refer√™ncias (`QTextEdit`)**
* **Patrocinadores**:

  * Din√¢mica (`QScrollArea` com m√∫ltiplos `QGroupBox`)
  * Campos:

    * Nome da a√ß√£o (`QLineEdit`)
    * Hor√°rio da capta√ß√£o (`QTimeEdit` + `QCheckBox` para livre)
    * Respons√°vel (`QComboBox` populado por equipe)
    * Entrega Real Time (`QCheckBox` + `QTimeEdit`)
    * Editor respons√°vel (`QComboBox`)
    * Orienta√ß√µes (`QTextEdit`)
* **Programa√ß√£o de Palcos (`QTableWidget`)**: Palco, Artista, Hor√°rio In√≠cio/Fim, Observa√ß√µes.
* **Entregas** (dividido em Real Time e P√≥s-Evento):

  * Real Time (`QTableWidget` com T√≠tulo, Hora, Editor, Plataforma, Orienta√ß√µes)
  * P√≥s-Evento (Deadline geral `QDateEdit`, Pacotes `QListWidget` com checkboxes, Observa√ß√µes finais `QTextEdit`)

### ‚úÖ **Bot√µes obrigat√≥rios no rodap√©**:

* **Salvar Briefing**: Usa m√©todo `BriefingRepository.create_or_update_briefing(event_id, dados)`
* **Carregar Briefing**: Usa m√©todo `BriefingRepository.get_briefing_by_event(event_id)`
* **Gerar Timeline**: Usa m√©todo `TimelineRepository.generate_timeline_from_briefing(event_id)` e emite o sinal `timeline_gerada(event_id)`

---

## **2. BriefingRepository (Backend)**

* `BriefingRepository.py`

### M√©todos cr√≠ticos:

* `create_or_update_briefing(event_id, dados_dict)`
* `get_briefing_by_event(event_id)`
* `get_briefing_items_by_type(briefing_id, tipo_item)`
* **Todas as opera√ß√µes devem utilizar timestamps com ISO8601.**

---

## **3. Banco de Dados Briefing**

* `briefing_tables.sql`

```sql
CREATE TABLE briefings (
  id TEXT PRIMARY KEY,
  event_id TEXT NOT NULL UNIQUE,
  created_at TEXT NOT NULL,
  updated_at TEXT NOT NULL
);

CREATE TABLE briefing_items (
  id TEXT PRIMARY KEY,
  briefing_id TEXT NOT NULL,
  type TEXT NOT NULL,
  content TEXT NOT NULL,
  created_at TEXT NOT NULL,
  updated_at TEXT NOT NULL,
  FOREIGN KEY (briefing_id) REFERENCES briefings(id) ON DELETE CASCADE
);

CREATE INDEX idx_briefing_items ON briefing_items (briefing_id, type);
```

---

# üìÜ **ABA TIMELINE ‚Äì Implementa√ß√£o Detalhada**

**Finalidade:** Visualiza√ß√£o din√¢mica das atividades, baseada exclusivamente nos dados do Briefing.

## **1. TimelineWidget (GUI)**

* `timeline_widget.py`
* `TimelineWidget(QWidget)`

### ‚úÖ **Estrutura da Interface**:

* **Seletor de Evento (`QComboBox`)**: Obrigatoriamente integrado ao estado global do evento selecionado.
* **Bot√£o "Gerar/Atualizar Timeline"**: Usa m√©todo `TimelineRepository.generate_timeline_from_briefing(event_id)`
* **Visualizador Cronol√≥gico (QGraphicsView/QScrollArea)**:

  * Blocos com t√≠tulo, hor√°rio, respons√°vel, status.
  * Agrupamento por atividade (capta√ß√£o, edi√ß√£o, entrega).
* **Zoom (`QSlider`)**
* **Filtros (`QComboBox/QCheckBox`)**: Tipo, Respons√°vel.
* **Drag & Drop**: atualiza usando `TimelineRepository.update_timeline_item(item_id, dados)`
* **Detec√ß√£o visual de conflitos**: usando `TimelineRepository.check_conflicts(event_id)`

---

## **2. TimelineRepository (Backend)**

* `TimelineRepository.py`

### M√©todos cr√≠ticos:

* `generate_timeline_from_briefing(event_id)`
* `get_timeline_by_event(event_id)`
* `update_timeline_item(item_id, dados)`
* `check_conflicts(event_id)`

---

## **3. Banco de Dados Timeline**

* `timeline_events.sql`

```sql
CREATE TABLE timeline_events (
  id TEXT PRIMARY KEY,
  event_id TEXT NOT NULL,
  briefing_item_id TEXT,
  title TEXT NOT NULL,
  start_time TEXT NOT NULL,
  end_time TEXT,
  type TEXT CHECK(type IN ('captacao','edicao','entrega','preparacao','outro')),
  status TEXT DEFAULT 'Pendente' CHECK(status IN ('Pendente','Em Andamento','Concluido','Atrasado','Cancelado')),
  responsible_id TEXT,
  notes TEXT,
  created_at TEXT NOT NULL,
  updated_at TEXT NOT NULL,
  FOREIGN KEY (event_id) REFERENCES briefings(event_id) ON DELETE CASCADE
);
CREATE INDEX idx_timeline ON timeline_events (event_id, start_time, type, responsible_id);
```

---

## üîÑ **INTERA√á√ïES ENTRE ABAS (apenas informativas, sem implementa√ß√£o adicional)**

* **EDI√á√ïES** (j√° implementada): Recebe automaticamente as entregas e editores definidos no Briefing via m√©todos existentes.
* **EQUIPE** (j√° implementada): Fornece respons√°veis populando QComboBox dos widgets via m√©todos existentes.
* **ENTREGAS** (j√° implementada): Utiliza entregas definidas no briefing via m√©todos existentes.
* **MONITORAMENTO** (j√° implementada): Utiliza status das tarefas diretamente da Timeline.
* **FEEDBACK FINAL** (j√° implementada): Coleta dados finais usando Briefing e Timeline existentes.

---

## üõ†Ô∏è **SCRIPTS DE VALIDA√á√ÉO FINAL (OBRIGAT√ìRIOS)**

Executar ap√≥s implementa√ß√£o:

```bash
python diagnostico_melhorado_briefing.py
python diagnostico_melhorado_timeline.py
python testar_aba_briefing.py
python testar_aba_timeline.py
```

---

## üìã **RECOMENDA√á√ïES FINAIS (opcionais, por√©m altamente recomendadas)**

* Crie testes unit√°rios robustos.
* Implemente logging detalhado.
* Avalie responsividade e integridade da UI periodicamente.

---

Este prompt detalhado assegura que as abas **BRIEFING e TIMELINE** sejam implementadas ou ajustadas de forma extremamente clara e precisa, garantindo sua integra√ß√£o perfeita com as demais abas j√° existentes no sistema **GoNetwork AI**, proporcionando uma experi√™ncia coesa e altamente funcional.
