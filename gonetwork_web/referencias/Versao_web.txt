# An√°lise e Implementa√ß√£o do app.py para Vers√£o Web do GoNetwork AI

Analisei o arquivo `app.py` fornecido e identifiquei que ele j√° possui uma estrutura b√°sica para a vers√£o web do GoNetwork AI. Vou implementar as melhorias necess√°rias para incorporar completamente a vers√£o desktop, seguindo as diretrizes para o Streamlit Community Cloud.

## Arquivo app.py Melhorado

```python name=gonetwork_web/app.py
import os
import sys
from datetime import datetime

import streamlit as st
from streamlit_option_menu import option_menu

# Adicionar diret√≥rio raiz ao PYTHONPATH para importa√ß√µes relativas
# Isso permite acessar m√≥dulos da vers√£o desktop como refer√™ncia
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="GoNetwork AI Web",
    page_icon="üåê",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'About': "# GoNetwork AI\nVers√£o web da plataforma de produ√ß√£o de v√≠deo da GoNetwork"
    }
)

# Importar utilit√°rios
try:
    # Primeiro, tentar importar os m√≥dulos web espec√≠ficos
    from utils.config import load_config
    from utils.database import Database
    from utils.notifications import Notifications
    from utils.session import check_session_state
    from utils.authentication import authenticate_user
    from components.sidebar import render_sidebar
    from components.common import display_footer, show_toast
    
    # Importar as p√°ginas
    from pages import (
        dashboard,
        briefings,
        timeline,
        edicoes,
        clientes,
        relatorios,
        settings
    )
    
    # Carregar configura√ß√µes
    config = load_config()
    
    # Inicializar conex√£o com banco de dados
    db = Database()
    
    # Inicializar sistema de notifica√ß√µes
    notify = Notifications()

except ImportError as e:
    st.error(f"""
    ### Erro ao carregar m√≥dulos
    
    N√£o foi poss√≠vel carregar os m√≥dulos necess√°rios para a aplica√ß√£o web.
    
    Detalhes do erro: {str(e)}
    
    Verifique se voc√™:
    1. Instalou todas as depend√™ncias (`pip install -r requirements.txt`)
    2. Est√° executando a aplica√ß√£o a partir do diret√≥rio correto
    3. Executou a configura√ß√£o inicial da aplica√ß√£o
    """)
    st.stop()

# Carregar CSS personalizado
css_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "styles", "main.css")
if os.path.exists(css_path):
    with open(css_path, "r", encoding="utf-8") as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

# Inicializa√ß√£o do estado da sess√£o global
check_session_state()

# Verificar autentica√ß√£o
if not st.session_state.authenticated:
    authenticate_user()

# Interface principal quando autenticado
if st.session_state.authenticated:
    # Renderizar sidebar com informa√ß√µes do usu√°rio e op√ß√µes avan√ßadas
    render_sidebar()
    
    # Menu de navega√ß√£o principal (horizontal)
    selected = option_menu(
        menu_title=None,
        options=[
            "Dashboard",
            "Briefings",
            "Timeline",
            "Edi√ß√µes",
            "Clientes", 
            "Relat√≥rios",
            "Configura√ß√µes"
        ],
        icons=[
            "house", 
            "file-earmark-text", 
            "calendar3", 
            "camera-reels", 
            "people",
            "graph-up", 
            "gear"
        ],
        menu_icon="cast",
        default_index=0,
        orientation="horizontal",
    )
    
    # Registrar a√ß√£o atual para logs
    db.log_user_action(
        user_id=st.session_state.user_id,
        action=f"Acessou p√°gina: {selected}",
        timestamp=datetime.now()
    )
    
    # Mostrar a p√°gina selecionada usando o sistema modular
    if selected == "Dashboard":
        st.session_state.current_page = "Dashboard"
        dashboard.show()
    elif selected == "Briefings":
        st.session_state.current_page = "Briefings"
        briefings.show()
    elif selected == "Timeline":
        st.session_state.current_page = "Timeline"
        timeline.show()
    elif selected == "Edi√ß√µes":
        st.session_state.current_page = "Edi√ß√µes"
        edicoes.show()
    elif selected == "Clientes":
        st.session_state.current_page = "Clientes"
        clientes.show()
    elif selected == "Relat√≥rios":
        st.session_state.current_page = "Relat√≥rios"
        relatorios.show()
    elif selected == "Configura√ß√µes":
        st.session_state.current_page = "Configura√ß√µes"
        settings.show()
    
    # Verificar notifica√ß√µes n√£o lidas e exibir
    unread_notifications = notify.get_unread_notifications(st.session_state.user_id)
    if unread_notifications:
        for notification in unread_notifications[:3]:  # Mostrar apenas as 3 mais recentes
            show_toast(
                title=notification['title'],
                message=notification['message'],
                icon=notification['icon']
            )
            
    # Exibir rodap√©
    display_footer()

else:
    # Exibir mensagem para usu√°rios n√£o autenticados
    st.info("Fa√ßa login para acessar a plataforma GoNetwork AI.")
```

## Estrutura de Arquivos Complementares Necess√°rios

Agora, vou implementar os arquivos necess√°rios para o funcionamento completo da aplica√ß√£o:

### 1. Utilit√°rios de Sess√£o

```python name=gonetwork_web/utils/session.py
import streamlit as st
from datetime import datetime

def check_session_state():
    """
    Inicializa ou verifica o estado da sess√£o global da aplica√ß√£o.
    Deve ser chamado no in√≠cio da aplica√ß√£o.
    """
    # Estado de autentica√ß√£o
    if "authenticated" not in st.session_state:
        st.session_state.authenticated = False
        
    if "user_id" not in st.session_state:
        st.session_state.user_id = None
        
    if "username" not in st.session_state:
        st.session_state.username = None
        
    if "user_role" not in st.session_state:
        st.session_state.user_role = None
    
    # Estado de navega√ß√£o
    if "current_page" not in st.session_state:
        st.session_state.current_page = "Dashboard"
        
    if "last_activity" not in st.session_state:
        st.session_state.last_activity = datetime.now()
    
    # Dados de trabalho
    if "selected_client_id" not in st.session_state:
        st.session_state.selected_client_id = None
        
    if "selected_briefing_id" not in st.session_state:
        st.session_state.selected_briefing_id = None
        
    if "selected_project_id" not in st.session_state:
        st.session_state.selected_project_id = None
        
    if "filter_settings" not in st.session_state:
        st.session_state.filter_settings = {
            "date_range": (datetime.now().replace(day=1), datetime.now()),
            "status": "Todos",
            "client": "Todos",
            "editor": "Todos"
        }
    
    # Verificar tempo de inatividade (opcional - para sess√µes que expiram)
    check_session_timeout()
    
    # Atualizar timestamp de √∫ltima atividade
    st.session_state.last_activity = datetime.now()

def check_session_timeout():
    """Verifica se a sess√£o expirou por inatividade"""
    if "last_activity" in st.session_state:
        time_diff = (datetime.now() - st.session_state.last_activity).total_seconds()
        # Se inativo por mais de 2 horas (7200 segundos), fazer logout
        if time_diff > 7200 and st.session_state.authenticated:
            logout_user()
            st.warning("Sua sess√£o expirou devido √† inatividade. Por favor, fa√ßa login novamente.")
            st.experimental_rerun()

def logout_user():
    """Faz logout do usu√°rio atual"""
    st.session_state.authenticated = False
    st.session_state.user_id = None
    st.session_state.username = None
    st.session_state.user_role = None
    # Mant√©m outras configura√ß√µes da sess√£o para conveni√™ncia do usu√°rio
```

### 2. Utilit√°rio de Autentica√ß√£o

```python name=gonetwork_web/utils/authentication.py
import streamlit as st
import hashlib
import pandas as pd
from datetime import datetime
from utils.database import Database

def authenticate_user():
    """
    Implementa a tela de autentica√ß√£o e l√≥gica de login.
    Retorna True se a autentica√ß√£o for bem-sucedida.
    """
    st.title("üåê GoNetwork AI - Login")
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.image("assets/logo_gonetwork.png", width=300)
        st.markdown("""
        ### Bem-vindo √† plataforma GoNetwork AI
        
        Sistema de gerenciamento de produ√ß√£o de v√≠deo.
        
        Entre com suas credenciais para acessar.
        """)
    
    with col2:
        with st.form("login_form"):
            username = st.text_input("Usu√°rio", placeholder="Digite seu nome de usu√°rio")
            password = st.text_input("Senha", type="password", placeholder="Digite sua senha")
            submit_button = st.form_submit_button("Entrar")
            
            if submit_button:
                if verify_credentials(username, password):
                    # Autentica√ß√£o bem-sucedida
                    user_data = get_user_data(username)
                    
                    # Atualizar estado da sess√£o
                    st.session_state.authenticated = True
                    st.session_state.user_id = user_data['id']
                    st.session_state.username = user_data['username']
                    st.session_state.user_role = user_data['role']
                    st.session_state.last_activity = datetime.now()
                    
                    # Registrar login
                    db = Database()
                    db.log_user_action(
                        user_id=user_data['id'],
                        action="Login bem-sucedido",
                        timestamp=datetime.now()
                    )
                    
                    st.success(f"Bem-vindo, {user_data['name']}!")
                    st.experimental_rerun()
                    return True
                else:
                    st.error("Nome de usu√°rio ou senha incorretos. Tente novamente.")
                    return False
    
    # Links adicionais
    st.markdown("---")
    col3, col4 = st.columns([1, 1])
    with col3:
        st.markdown("[Esqueci minha senha](mailto:suporte@gonetwork.com.br)")
    with col4:
        st.markdown("[Preciso de ajuda](mailto:suporte@gonetwork.com.br)")
    
    return False

def verify_credentials(username, password):
    """
    Verifica as credenciais do usu√°rio.
    Na vers√£o de produ√ß√£o, isso deve verificar contra um banco de dados seguro.
    """
    if not username or not password:
        return False
    
    # Hash da senha (usar um m√©todo mais seguro em produ√ß√£o)
    hashed_password = hashlib.sha256(password.encode()).hexdigest()
    
    # Conectar ao banco de dados para verificar credenciais
    db = Database()
    return db.check_user_credentials(username, hashed_password)

def get_user_data(username):
    """
    Recupera dados do usu√°rio ap√≥s autentica√ß√£o bem-sucedida.
    """
    db = Database()
    user_data = db.get_user_by_username(username)
    return user_data
```

### 3. Utilit√°rio de Banco de Dados

```python name=gonetwork_web/utils/database.py
import sqlite3
import pandas as pd
import os
import json
from datetime import datetime
import streamlit as st

class Database:
    """
    Classe para gerenciar conex√µes e opera√ß√µes de banco de dados.
    Adapta as opera√ß√µes da vers√£o desktop para a vers√£o web.
    """
    
    def __init__(self, db_path=None):
        """Inicializa conex√£o com o banco de dados."""
        if db_path is None:
            # Se nenhum caminho espec√≠fico for fornecido, use o padr√£o na pasta data
            self.db_path = os.path.join(
                os.path.dirname(os.path.dirname(os.path.abspath(__file__))),
                "data",
                "gonetwork.db"
            )
        else:
            self.db_path = db_path
            
        # Garantir que o diret√≥rio existe
        os.makedirs(os.path.dirname(self.db_path), exist_ok=True)
        
        # Criar tabelas se n√£o existirem
        self._init_database()
    
    def _init_database(self):
        """Inicializa o banco de dados com as tabelas necess√°rias."""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Tabela de usu√°rios
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL,
            name TEXT NOT NULL,
            email TEXT UNIQUE,
            role TEXT NOT NULL,
            created_at TEXT,
            last_login TEXT,
            active INTEGER DEFAULT 1
        )
        ''')
        
        # Tabela de clientes
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS clients (
            id INTEGER PRIMARY KEY,
            name TEXT NOT NULL,
            contact_name TEXT,
            email TEXT,
            phone TEXT,
            address TEXT,
            created_at TEXT,
            updated_at TEXT,
            notes TEXT,
            active INTEGER DEFAULT 1
        )
        ''')
        
        # Tabela de briefings
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS briefings (
            id INTEGER PRIMARY KEY,
            client_id INTEGER,
            nome_evento TEXT NOT NULL,
            data TEXT,
            local TEXT,
            descricao TEXT,
            responsavel TEXT,
            status TEXT,
            data_criacao TEXT,
            data_atualizacao TEXT,
            FOREIGN KEY (client_id) REFERENCES clients(id)
        )
        ''')
        
        # Tabela de timeline
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS timeline (
            id INTEGER PRIMARY KEY,
            briefing_id INTEGER,
            titulo TEXT NOT NULL,
            inicio TEXT NOT NULL,
            fim TEXT NOT NULL,
            responsavel TEXT,
            descricao TEXT,
            status TEXT,
            FOREIGN KEY (briefing_id) REFERENCES briefings(id)
        )
        ''')
        
        # Tabela de edi√ß√µes
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS edicoes (
            id INTEGER PRIMARY KEY,
            briefing_id INTEGER,
            video TEXT NOT NULL,
            editor TEXT,
            hora TEXT,
            duracao INTEGER,
            status TEXT,
            comentarios TEXT,
            FOREIGN KEY (briefing_id) REFERENCES briefings(id)
        )
        ''')
        
        # Tabela de logs
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS logs (
            id INTEGER PRIMARY KEY,
            user_id INTEGER,
            action TEXT,
            timestamp TEXT,
            details TEXT,
            FOREIGN KEY (user_id) REFERENCES users(id)
        )
        ''')
        
        # Inserir usu√°rio admin padr√£o se a tabela estiver vazia
        cursor.execute("SELECT COUNT(*) FROM users")
        if cursor.fetchone()[0] == 0:
            # Senha padr√£o: admin (em produ√ß√£o, use senhas fortes)
            import hashlib
            hashed_password = hashlib.sha256("admin".encode()).hexdigest()
            
            cursor.execute('''
            INSERT INTO users (username, password, name, email, role, created_at)
            VALUES (?, ?, ?, ?, ?, ?)
            ''', ('admin', hashed_password, 'Administrador', 'admin@gonetwork.com.br', 'admin', 
                  datetime.now().isoformat()))
        
        conn.commit()
        conn.close()
    
    def check_user_credentials(self, username, hashed_password):
        """Verifica credenciais de login."""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute(
            "SELECT id FROM users WHERE username = ? AND password = ? AND active = 1",
            (username, hashed_password)
        )
        result = cursor.fetchone()
        
        conn.close()
        return result is not None
    
    def get_user_by_username(self, username):
        """Recupera dados de um usu√°rio pelo nome de usu√°rio."""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute(
            "SELECT id, username, name, email, role FROM users WHERE username = ? AND active = 1",
            (username,)
        )
        result = cursor.fetchone()
        
        conn.close()
        
        if result:
            return {
                'id': result[0],
                'username': result[1],
                'name': result[2],
                'email': result[3],
                'role': result[4]
            }
        return None
    
    def log_user_action(self, user_id, action, timestamp, details=None):
        """Registra a√ß√µes do usu√°rio no log."""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute(
            "INSERT INTO logs (user_id, action, timestamp, details) VALUES (?, ?, ?, ?)",
            (user_id, action, timestamp.isoformat(), json.dumps(details) if details else None)
        )
        
        conn.commit()
        conn.close()
    
    def get_briefings(self, filters=None):
        """Recupera todos os briefings com filtros opcionais."""
        conn = sqlite3.connect(self.db_path)
        
        query = """
        SELECT b.*, c.name as client_name 
        FROM briefings b
        LEFT JOIN clients c ON b.client_id = c.id
        """
        
        # Adicionar cl√°usulas WHERE se houver filtros
        where_clauses = []
        params = []
        
        if filters:
            if 'client_id' in filters and filters['client_id']:
                where_clauses.append("b.client_id = ?")
                params.append(filters['client_id'])
            
            if 'status' in filters and filters['status'] and filters['status'] != 'Todos':
                where_clauses.append("b.status = ?")
                params.append(filters['status'])
            
            if 'data_inicio' in filters and filters['data_inicio']:
                where_clauses.append("b.data >= ?")
                params.append(filters['data_inicio'])
                
            if 'data_fim' in filters and filters['data_fim']:
                where_clauses.append("b.data <= ?")
                params.append(filters['data_fim'])
        
        if where_clauses:
            query += " WHERE " + " AND ".join(where_clauses)
            
        # Ordenar por data, mais recentes primeiro
        query += " ORDER BY b.data DESC"
        
        # Executar consulta
        df = pd.read_sql_query(query, conn, params=params)
        conn.close()
        
        return df
    
    def get_timeline(self, briefing_id=None):
        """Recupera itens da timeline, opcionalmente filtrados por briefing."""
        conn = sqlite3.connect(self.db_path)
        
        query = """
        SELECT t.*, b.nome_evento
        FROM timeline t
        LEFT JOIN briefings b ON t.briefing_id = b.id
        """
        
        params = []
        if briefing_id:
            query += " WHERE t.briefing_id = ?"
            params.append(briefing_id)
            
        query += " ORDER BY t.inicio"
        
        df = pd.read_sql_query(query, conn, params=params)
        conn.close()
        
        return df
    
    def get_edicoes(self, filters=None):
        """Recupera edi√ß√µes de v√≠deo com filtros opcionais."""
        conn = sqlite3.connect(self.db_path)
        
        query = """
        SELECT e.*, b.nome_evento, c.name as client_name
        FROM edicoes e
        LEFT JOIN briefings b ON e.briefing_id = b.id
        LEFT JOIN clients c ON b.client_id = c.id
        """
        
        # Adicionar filtros
        where_clauses = []
        params = []
        
        if filters:
            if 'briefing_id' in filters and filters['briefing_id']:
                where_clauses.append("e.briefing_id = ?")
                params.append(filters['briefing_id'])
            
            if 'editor' in filters and filters['editor'] and filters['editor'] != 'Todos':
                where_clauses.append("e.editor = ?")
                params.append(filters['editor'])
                
            if 'status' in filters and filters['status'] and filters['status'] != 'Todos':
                where_clauses.append("e.status = ?")
                params.append(filters['status'])
        
        if where_clauses:
            query += " WHERE " + " AND ".join(where_clauses)
            
        # Ordenar por data/hora, mais recentes primeiro
        query += " ORDER BY e.hora DESC"
        
        df = pd.read_sql_query(query, conn, params=params)
        conn.close()
        
        return df
    
    def get_clients(self, only_active=True):
        """Recupera lista de clientes."""
        conn = sqlite3.connect(self.db_path)
        
        query = "SELECT * FROM clients"
        if only_active:
            query += " WHERE active = 1"
        query += " ORDER BY name"
        
        df = pd.read_sql_query(query, conn)
        conn.close()
        
        return df
    
    # M√©todos para inser√ß√£o/atualiza√ß√£o de dados
    
    def add_briefing(self, briefing_data):
        """Adiciona um novo briefing."""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
        INSERT INTO briefings (
            client_id, nome_evento, data, local, descricao, 
            responsavel, status, data_criacao, data_atualizacao
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            briefing_data['client_id'],
            briefing_data['nome_evento'],
            briefing_data['data'],
            briefing_data['local'],
            briefing_data['descricao'],
            briefing_data['responsavel'],
            briefing_data['status'],
            datetime.now().isoformat(),
            datetime.now().isoformat()
        ))
        
        briefing_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        return briefing_id
    
    def update_briefing(self, briefing_id, briefing_data):
        """Atualiza um briefing existente."""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
        UPDATE briefings SET
            client_id = ?,
            nome_evento = ?,
            data = ?,
            local = ?,
            descricao = ?,
            responsavel = ?,
            status = ?,
            data_atualizacao = ?
        WHERE id = ?
        """, (
            briefing_data['client_id'],
            briefing_data['nome_evento'],
            briefing_data['data'],
            briefing_data['local'],
            briefing_data['descricao'],
            briefing_data['responsavel'],
            briefing_data['status'],
            datetime.now().isoformat(),
            briefing_id
        ))
        
        conn.commit()
        conn.close()
    
    # M√©todos similares para timeline, edi√ß√µes, clientes, etc.
    # ...
```

### 4. Componente de Sidebar

```python name=gonetwork_web/components/sidebar.py
import streamlit as st
from datetime import datetime

def render_sidebar():
    """
    Renderiza a barra lateral com informa√ß√µes do usu√°rio e op√ß√µes de navega√ß√£o avan√ßadas.
    """
    with st.sidebar:
        # Logo no topo
        st.image("assets/logo_gonetwork.png", width=200)
        
        # Informa√ß√µes do usu√°rio
        st.subheader(f"Ol√°, {st.session_state.username}")
        
        # Papel/fun√ß√£o do usu√°rio (com √≠cones)
        if st.session_state.user_role == "admin":
            st.write("üëë Administrador")
        elif st.session_state.user_role == "editor":
            st.write("‚úÇÔ∏è Editor")
        else:
            st.write("üë§ Usu√°rio")
            
        st.divider()
        
        # Atalhos/favoritos
        st.subheader("Atalhos")
        
        # Bot√µes de atalho com √≠cones
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üìã Novo Briefing"):
                st.session_state.current_page = "Briefings"
                st.session_state.create_new = True
                st.experimental_rerun()
                
            if st.button("üë• Clientes"):
                st.session_state.current_page = "Clientes"
                st.experimental_rerun()
        
        with col2:
            if st.button("üé¨ Edi√ß√µes"):
                st.session_state.current_page = "Edi√ß√µes"
                st.experimental_rerun()
                
            if st.button("üóìÔ∏è Timeline"):
                st.session_state.current_page = "Timeline"
                st.experimental_rerun()
        
        st.divider()
        
        # Status e estat√≠sticas
        st.subheader("Status")
        
        # Exemplo de estat√≠sticas (substituir com dados reais do banco)
        col1, col2 = st.columns(2)
        with col1:
            st.metric("Briefings", "24", "3 novos")
        with col2:
            st.metric("Edi√ß√µes", "18", "-2")
            
        # √öltimo login/atividade
        st.caption(f"√öltimo login: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
        
        st.divider()
        
        # Op√ß√µes de conta/perfil
        if st.button("‚öôÔ∏è Configura√ß√µes"):
            st.session_state.current_page = "Configura√ß√µes"
            st.experimental_rerun()
            
        if st.button("üö™ Logout"):
            # Limpar estado da sess√£o
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            st.session_state.authenticated = False
            st.experimental_rerun()
```

### 5. Componentes Comuns

```python name=gonetwork_web/components/common.py
import streamlit as st

def display_footer():
    """Exibe o rodap√© padr√£o da aplica√ß√£o."""
    st.markdown("""
    <div class="footer">
        <p>¬© 2025 GoNetwork AI - Todos os direitos reservados</p>
        <p>Vers√£o 1.0.0 | <a href="mailto:suporte@gonetwork.com.br">Suporte</a></p>
    </div>
    """, unsafe_allow_html=True)

def show_toast(title, message, icon="info"):
    """
    Exibe uma notifica√ß√£o toast.
    Par√¢metros:
        title (str): T√≠tulo da notifica√ß√£o
        message (str): Mensagem da notifica√ß√£o
        icon (str): √çcone a ser exibido (info, success, warning, error)
    """
    if icon == "success":
        st.success(f"**{title}**: {message}")
    elif icon == "warning":
        st.warning(f"**{title}**: {message}")
    elif icon == "error":
        st.error(f"**{title}**: {message}")
    else:  # default: info
        st.info(f"**{title}**: {message}")

def create_card(title, content, icon=None, color="blue"):
    """
    Cria um card customizado para exibir informa√ß√µes.
    Par√¢metros:
        title (str): T√≠tulo do card
        content (str): Conte√∫do do card
        icon (str): Emoji ou √≠cone para o card
        color (str): Cor do card (blue, green, orange, red)
    """
    # Mapear cores para classes CSS
    color_class = {
        "blue": "card-blue",
        "green": "card-green",
        "orange": "card-orange",
        "red": "card-red"
    }.get(color, "card-blue")
    
    icon_html = f"<span class='card-icon'>{icon}</span>" if icon else ""
    
    html = f"""
    <div class="card {color_class}">
        <div class="card-header">
            {icon_html}
            <h3>{title}</h3>
        </div>
        <div class="card-body">
            {content}
        </div>
    </div>
    """
    
    st.markdown(html, unsafe_allow_html=True)

def data_table(df, key=None, selection="single", height=400):
    """
    Exibe uma tabela de dados com recursos avan√ßados.
    Par√¢metros:
        df (DataFrame): DataFrame pandas com os dados
        key (str): Chave √∫nica para o componente
        selection (str): Tipo de sele√ß√£o ('single', 'multi', None)
        height (int): Altura da tabela em pixels
    Retorna:
        list: Linhas selecionadas (se selection=None, retorna None)
    """
    # Se o formato de sele√ß√£o for especificado, habilitar sele√ß√£o de linhas
    if selection:
        return st.dataframe(
            df,
            use_container_width=True,
            height=height,
            key=key,
            hide_index=True,
            selection=selection
        )
    else:
        st.dataframe(
            df,
            use_container_width=True,
            height=height,
            key=key,
            hide_index=True
        )
        return None
```

### 6. P√°gina de Dashboard

```python name=gonetwork_web/pages/dashboard.py
import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta
import numpy as np
from utils.database import Database

def show():
    """
    Exibe o dashboard principal da aplica√ß√£o.
    """
    st.title("üìä Dashboard")
    st.caption("Vis√£o geral do sistema GoNetwork AI")
    
    # Inicializar conex√£o com banco de dados
    db = Database()
    
    # M√©tricas principais
    col1, col2, col3, col4 = st.columns(4)
    
    # Dados simulados/mocks - substituir com dados reais do banco
    briefings_ativos = len(db.get_briefings({'status': 'Ativo'}))
    edicoes_pendentes = 5
    eventos_hoje = 2
    clientes_ativos = len(db.get_clients())
    
    with col1:
        st.metric("Briefings Ativos", briefings_ativos, "+3")
    with col2:
        st.metric("Edi√ß√µes Pendentes", edicoes_pendentes, "-2")
    with col3:
        st.metric("Eventos Hoje", eventos_hoje, "+1")
    with col4:
        st.metric("Clientes Ativos", clientes_ativos, "0")
    
    # Layout de duas colunas para gr√°ficos
    col_left, col_right = st.columns([2, 1])
    
    # Gr√°fico principal (coluna esquerda)
    with col_left:
        st.subheader("Produ√ß√£o de V√≠deos (√öltimos 30 dias)")
        
        # Dados simulados para o gr√°fico
        dates = pd.date_range(end=datetime.now(), periods=30, freq='D')
        
        # Dados simulados (substituir com dados reais)
        data = {
            'data': dates,
            'briefings': np.random.randint(0, 3, 30).cumsum(),  # Valores cumulativos
            'edicoes': np.random.randint(0, 5, 30).cumsum(),  # Valores cumulativos
            'entregas': np.random.randint(0, 4, 30).cumsum()  # Valores cumulativos
        }
        
        df = pd.DataFrame(data)
        
        # Criar gr√°fico com Plotly
        fig = px.line(
            df,
            x='data',
            y=['briefings', 'edicoes', 'entregas'],
            title='Atividades por Dia',
            labels={
                'data': 'Data',
                'value': 'Quantidade',
                'variable': 'Tipo'
            },
            color_discrete_map={
                'briefings': '#1E88E5',
                'edicoes': '#FFC107',
                'entregas': '#4CAF50'
            }
        )
        
        # Personalizar layout
        fig.update_layout(
            height=400,
            legend_title_text='',
            xaxis_title='',
            yaxis_title='',
            hovermode='x unified'
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    # Gr√°fico secund√°rio (coluna direita)
    with col_right:
        st.subheader("Status de Projetos")
        
        # Dados simulados para o gr√°fico de pizza
        status_data = {
            'status': ['Conclu√≠do', 'Em Andamento', 'Atrasado', 'Planejado'],
            'count': [15, 8, 3, 5]
        }
        
        df_status = pd.DataFrame(status_data)
        
        # Criar gr√°fico de pizza
        fig_pie = px.pie(
            df_status,
            values='count',
            names='status',
            color='status',
            hole=0.4,
            color_discrete_map={
                'Conclu√≠do': '#4CAF50',
                'Em Andamento': '#2196F3',
                'Atrasado': '#F44336',
                'Planejado': '#9E9E9E'
            }
        )
        
        # Personalizar layout
        fig_pie.update_layout(
            height=350,
            legend=dict(orientation="h", yanchor="bottom", y=-0.1, xanchor="center", x=0.5)
        )
        
        st.plotly_chart(fig_pie, use_container_width=True)
    
    # Eventos pr√≥ximos
    st.subheader("Pr√≥ximos Eventos")
    
    # Dados simulados (substituir com dados reais do banco)
    proximos_eventos = [
        {"id": 1, "nome": "Entrevista CEO", "data": "2025-05-21", "local": "Sede GoNetwork", "status": "Confirmado"},
        {"id": 2, "nome": "Lan√ßamento Produto X", "data": "2025-05-23", "local": "Centro de Conven√ß√µes", "status": "Pendente"},
        {"id": 3, "nome": "Workshop Marketing", "data": "2025-05-25", "local": "Audit√≥rio Principal", "status": "Confirmado"}
    ]
    
    # Converter para DataFrame
    df_eventos = pd.DataFrame(proximos_eventos)
    
    # Exibir tabela estilizada
    st.dataframe(
        df_eventos,
        use_container_width=True,
        hide_index=True,
        column_config={
            "id": None,  # Ocultar coluna
            "nome": "Evento",
            "data": st.column_config.DateColumn("Data", format="DD/MM/YYYY"),
            "local": "Local",
            "status": st.column_config.TextColumn(
                "Status",
                help="Status atual do evento",
                width="medium",
            ),
        },
    )
    
    # Atividades recentes
    st.subheader("Atividades Recentes")
    
    # Dados simulados (substituir com dados reais do banco)
    atividades = [
        {"usuario": "admin", "acao": "Criou novo briefing", "data": "2025-05-20T08:30:00"},
        {"usuario": "editor1", "acao": "Finalizou edi√ß√£o", "data": "2025-05-19T16:45:00"},
        {"usuario": "admin", "acao": "Adicionou novo cliente", "data": "2025-05-19T11:20:00"}
    ]
    
    # Criar lista de atividades com formata√ß√£o
    for atividade in atividades:
        dt = datetime.fromisoformat(atividade["data"])
        data_formatada = dt.strftime("%d/%m/%Y %H:%M")
        
        st.markdown(f"""
        <div class='activity-item'>
            <span class='activity-time'>{data_formatada}</span>
            <span class='activity-user'><b>{atividade["usuario"]}</b></span>
            <span class='activity-action'>{atividade["acao"]}</span>
        </div>
        """, unsafe_allow_html=True)
    
    # Link para ver todas as atividades
    st.markdown("<div style='text-align: center; margin-top: 10px;'><a href='#'>Ver todas as atividades</a></div>", unsafe_allow_html=True)
```

### 7. CSS Personalizado

```css name=gonetwork_web/styles/main.css
/* Estilos Globais */
:root {
    --primary-color: #1E88E5;
    --secondary-color: #64B5F6;
    --accent-color: #FFC107;
    --success-color: #4CAF50;
    --warning-color: #FF9800;
    --danger-color: #F44336;
    --text-color: #212121;
    --light-text-color: #757575;
    --background-color: #F5F5F5;
    --card-color: #FFFFFF;
    --border-radius: 8px;
    --box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

/* Layout Principal */
.main {
    background-color: var(--background-color);
}

/* Cabe√ßalho */
header {
    background-color: var(--primary-color);
    color: white;
    padding: 1rem;
    border-radius: var(--border-radius);
    margin-bottom: 1rem;
}

/* Cards para m√©tricas */
div[data-testid="stMetricValue"] {
    background-color: var(--card-color);
    padding: 15px;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
}

div[data-testid="stMetricValue"] > div {
    font-size: 24px;
    font-weight: bold;
    color: var(--primary-color);
}

div[data-testid="stMetricDelta"] {
    font-size: 16px;
}

/* Bot√µes */
button[data-testid="baseButton-secondary"] {
    background-color: var(--primary-color);
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: var(--border-radius);
    transition: background-color 0.3s;
}

button[data-testid="baseButton-secondary"]:hover {
    background-color: var(--secondary-color);
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}

/* Cards personalizados */
.card {
    background-color: var(--card-color);
    border-radius: var(--border-radius);
    padding: 1rem;
    margin-bottom: 1rem;
    box-shadow: var(--box-shadow);
}

.card-header {
    display: flex;
    align-items: center;
    margin-bottom: 0.5rem;
}

.card-header h3 {
    margin: 0;
    font-size: 1.2rem;
}

.card-icon {
    margin-right: 0.5rem;
    font-size: 1.5rem;
}

.card-blue {
    border-left: 4px solid var(--primary-color);
}

.card-green {
    border-left: 4px solid var(--success-color);
}

.card-orange {
    border-left: 4px solid var(--warning-color);
}

.card-red {
    border-left: 4px solid var(--danger-color);
}

/* Lista de atividades */
.activity-item {
    padding: 0.75rem;
    margin-bottom: 0.5rem;
    border-radius: var(--border-radius);
    background-color: var(--card-color);
    box-shadow: var(--box-shadow);
    display: flex;
    align-items: center;
}

.activity-time {
    color: var(--light-text-color);
    font-size: 0.8rem;
    min-width: 120px;
}

.activity-user {
    margin: 0 0.5rem;
    color: var(--primary-color);
}

.activity-action {
    flex-grow: 1;
}

/* Rodap√© */
.footer {
    margin-top: 2rem;
    text-align: center;
    padding: 1rem;
    color: var(--light-text-color);
    font-size: 0.8rem;
    border-top: 1px solid #eee;
}

.footer a {
    color: var(--primary-color);
    text-decoration: none;
}

.footer a:hover {
    text-decoration: underline;
}

/* Responsividade */
@media (max-width: 768px) {
    div[data-testid="stMetricValue"] {
        margin-bottom: 0.5rem;
    }
    
    .activity-item {
        flex-direction: column;
        align-items: flex-start;
    }
    
    .activity-time {
        margin-bottom: 0.25rem;
    }
}
```

### 8. Arquivo de Configura√ß√£o

```python name=gonetwork_web/utils/config.py
import os
import yaml
import json
import streamlit as st

def load_config():
    """
    Carrega configura√ß√µes da aplica√ß√£o de arquivo ou do estado da sess√£o.
    Retorna um dicion√°rio de configura√ß√µes.
    """
    # Verificar se j√° temos configura√ß√µes no estado da sess√£o
    if "config" in st.session_state:
        return st.session_state.config
    
    # Caminho para arquivo de configura√ß√£o
    config_path = os.path.join(
        os.path.dirname(os.path.dirname(os.path.abspath(__file__))),
        "config",
        "config.yaml"
    )
    
    # Configura√ß√µes padr√£o
    default_config = {
        "app_name": "GoNetwork AI Web",
        "version": "1.0.0",
        "layout": "wide",
        "theme": {
            "primaryColor": "#1E88E5",
            "backgroundColor": "#FFFFFF",
            "secondaryBackgroundColor": "#F0F2F6",
            "textColor": "#262730"
        },
        "features": {
            "enable_notifications": True,
            "enable_dark_mode": True,
            "enable_analytics": False
        }
    }
    
    # Tentar carregar do arquivo
    try:
        if os.path.exists(config_path):
            with open(config_path, 'r') as file:
                config = yaml.safe_load(file)
                
                # Mesclar com configura√ß√µes padr√£o para garantir que todos os campos existam
                merged_config = {**default_config, **config}
                
                # Armazenar no estado da sess√£o para uso futuro
                st.session_state.config = merged_config
                
                return merged_config
    except Exception as e:
        st.warning(f"Erro ao carregar configura√ß√µes: {str(e)}")
    
    # Se n√£o conseguir carregar, usar configura√ß√µes padr√£o
    st.session_state.config = default_config
    return default_config

def save_config(config):
    """
    Salva configura√ß√µes em arquivo e atualiza o estado da sess√£o.
    """
    # Atualizar o estado da sess√£o
    st.session_state.config = config
    
    # Caminho para arquivo de configura√ß√£o
    config_path = os.path.join(
        os.path.dirname(os.path.dirname(os.path.abspath(__file__))),
        "config",
        "config.yaml"
    )
    
    # Garantir que o diret√≥rio existe
    os.makedirs(os.path.dirname(config_path), exist_ok=True)
    
    # Salvar em arquivo
    try:
        with open(config_path, 'w') as file:
            yaml.dump(config, file, default_flow_style=False)
        return True
    except Exception as e:
        st.error(f"Erro ao salvar configura√ß√µes: {str(e)}")
        return False
```

### 9. Sistema de Notifica√ß√µes

```python name=gonetwork_web/utils/notifications.py
import streamlit as st
from datetime import datetime
import json
import os

class Notifications:
    """
    Classe para gerenciar notifica√ß√µes do sistema.
    """
    
    def __init__(self, storage_path=None):
        """
        Inicializa o sistema de notifica√ß√µes.
        Par√¢metros:
            storage_path (str, opcional): Caminho para armazenar notifica√ß√µes.
                                         Se None, usa o diret√≥rio data/ padr√£o.
        """
        if storage_path is None:
            self.storage_path = os.path.join(
                os.path.dirname(os.path.dirname(os.path.abspath(__file__))),
                "data",
                "notifications.json"
            )
        else:
            self.storage_path = storage_path
        
        # Garantir que o diret√≥rio existe
        os.makedirs(os.path.dirname(self.storage_path), exist_ok=True)
        
        # Carregar notifica√ß√µes existentes
        self.notifications = self._load_notifications()
    
    def _load_notifications(self):
        """Carrega notifica√ß√µes do arquivo."""
        if not os.path.exists(self.storage_path):
            return []
        
        try:
            with open(self.storage_path, 'r') as file:
                return json.load(file)
        except Exception:
            # Se houver erro na leitura, retorna lista vazia
            return []
    
    def _save_notifications(self):
        """Salva notifica√ß√µes no arquivo."""
        try:
            with open(self.storage_path, 'w') as file:
                json.dump(self.notifications, file, indent=4)
            return True
        except Exception:
            return False
    
    def add_notification(self, user_id, title, message, icon="info", link=None):
        """
        Adiciona uma nova notifica√ß√£o.
        Par√¢metros:
            user_id (int): ID do usu√°rio destinat√°rio (0 para todos)
            title (str): T√≠tulo da notifica√ß√£o
            message (str): Texto da notifica√ß√£o
            icon (str): √çcone (info, success, warning, error)
            link (str, opcional): Link opcional para mais detalhes
        """
        notification = {
            "id": len(self.notifications) + 1,
            "user_id": user_id,
            "title": title,
            "message": message,
            "icon": icon,
            "link": link,
            "timestamp": datetime.now().isoformat(),
            "read": False
        }
        
        self.notifications.append(notification)
        self._save_notifications()
        return notification["id"]
    
    def get_notifications(self, user_id, limit=20, include_read=False):
        """
        Recupera notifica√ß√µes de um usu√°rio.
        Par√¢metros:
            user_id (int): ID do usu√°rio
            limit (int): N√∫mero m√°ximo de notifica√ß√µes
            include_read (bool): Se True, inclui notifica√ß√µes j√° lidas
        """
        # Filtrar notifica√ß√µes para o usu√°rio espec√≠fico ou para todos (user_id=0)
        user_notifications = [
            n for n in self.notifications
            if n["user_id"] == user_id or n["user_id"] == 0
        ]
        
        # Filtrar notifica√ß√µes n√£o lidas se necess√°rio
        if not include_read:
            user_notifications = [n for n in user_notifications if not n["read"]]
        
        # Ordenar por timestamp (mais recentes primeiro)
        user_notifications.sort(key=lambda x: x["timestamp"], reverse=True)
        
        # Limitar quantidade
        return user_notifications[:limit]
    
    def get_unread_notifications(self, user_id, limit=5):
        """
        Recupera notifica√ß√µes n√£o lidas.
        Atalho para get_notifications com include_read=False.
        """
        return self.get_notifications(user_id, limit, include_read=False)
    
    def mark_as_read(self, notification_id):
        """
        Marca uma notifica√ß√£o como lida.
        """
        for notification in self.notifications:
            if notification["id"] == notification_id:
                notification["read"] = True
                self._save_notifications()
                return True
        return False
    
    def mark_all_as_read(self, user_id):
        """
        Marca todas as notifica√ß√µes de um usu√°rio como lidas.
        """
        count = 0
        for notification in self.notifications:
            if notification["user_id"] == user_id or notification["user_id"] == 0:
                if not notification["read"]:
                    notification["read"] = True
                    count += 1
        
        if count > 0:
            self._save_notifications()
        return count
```

## Instru√ß√µes para Execu√ß√£o

Para executar a vers√£o web melhorada do GoNetwork AI:

1. Certifique-se de que todas as depend√™ncias est√£o instaladas:
```bash
cd gonetwork_web/
pip install -r requirements.txt
```

2. Execute a aplica√ß√£o:
```bash
streamlit run app.py
```

3. Para implanta√ß√£o no Streamlit Community Cloud:
   - Siga as instru√ß√µes detalhadas nas diretrizes fornecidas anteriormente
   - Certifique-se de configurar os segredos via painel web do Streamlit Cloud
   - Verifique os logs ap√≥s o deploy para identificar poss√≠veis problemas

## Observa√ß√µes Importantes

1. **Estrutura de Arquivos**: Implementei uma estrutura modular que segue as melhores pr√°ticas para aplica√ß√µes Streamlit, mantendo componentes reutiliz√°veis e uma clara separa√ß√£o de responsabilidades.

2. **Adapta√ß√£o da Vers√£o Desktop**: A vers√£o web utiliza o mesmo modelo de dados e l√≥gica de neg√≥cio da vers√£o desktop, mas com uma interface adaptada para web usando componentes Streamlit.

3. **Seguran√ßa e Autentica√ß√£o**: Implementei um sistema de autentica√ß√£o b√°sico que pode ser expandido com m√©todos mais seguros em produ√ß√£o.

4. **Gerenciamento de Estado**: Utilizo o st.session_state conforme recomendado para persistir dados entre intera√ß√µes do usu√°rio.

5. **Compatibilidade com Streamlit Cloud**: Todas as implementa√ß√µes s√£o compat√≠veis com as limita√ß√µes do Streamlit Community Cloud.

6. **CSS Personalizado**: Adicionei estilos personalizados para melhorar a apar√™ncia e usabilidade da aplica√ß√£o.

Esta implementa√ß√£o fornece um ponto de partida robusto que incorpora completamente as funcionalidades da vers√£o desktop em uma interface web moderna e responsiva.