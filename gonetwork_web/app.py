"""
GoNetwork AI Web - Aplica√ß√£o principal
Vers√£o 1.0.0
√öltima atualiza√ß√£o: 2025-05-20
"""

import importlib
import os
import sys
import traceback
from datetime import datetime

import streamlit as st

# Verificar depend√™ncias e implementar fallbacks
DEPENDENCIES = {"streamlit_option_menu": False}

# Tentar importar streamlit_option_menu
try:
    from streamlit_option_menu import option_menu

    DEPENDENCIES["streamlit_option_menu"] = True
except ImportError:
    # Fallback simples para option_menu
    def option_menu(menu_title, options, icons, default_index, orientation, **kwargs):
        selected = st.selectbox(
            label=menu_title if menu_title else "Navega√ß√£o",
            options=options,
            index=default_index,
        )
        return selected


# ------------------ CONFIGURA√á√ÉO INICIAL ------------------

# Adicionar diret√≥rio raiz ao PYTHONPATH para importa√ß√µes relativas
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="GoNetwork AI Web",
    page_icon="üåê",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        "About": "# GoNetwork AI\nVers√£o web da plataforma de produ√ß√£o de v√≠deo da GoNetwork",
        "Report a bug": "https://github.com/contatogonetwork/melhorapp/issues",
        "Get help": "mailto:suporte@gonetwork.com.br",
    },
)

# Verificar depend√™ncias ausentes
missing_dependencies = [
    name for name, installed in DEPENDENCIES.items() if not installed
]
if missing_dependencies:
    st.warning(
        f"""
    ‚ö†Ô∏è **Depend√™ncias ausentes detectadas:** {', '.join(missing_dependencies)}

    Para melhor experi√™ncia, instale as depend√™ncias necess√°rias:
    ```
    pip install {' '.join(missing_dependencies)}
    ```
    A aplica√ß√£o continuar√° funcionando, mas com funcionalidades limitadas.
    """
    )

# ------------------ CARREGAMENTO DE RECURSOS ------------------


# Fun√ß√£o para carregar CSS com cache
@st.cache_resource
def load_css():
    """Carrega e aplica o CSS personalizado uma √∫nica vez"""
    try:
        css_path = os.path.join(
            os.path.dirname(os.path.abspath(__file__)), "styles", "main.css"
        )
        if os.path.exists(css_path):
            with open(css_path, "r", encoding="utf-8") as f:
                st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)
    except Exception as e:
        st.warning(f"Aviso: N√£o foi poss√≠vel carregar o CSS personalizado: {str(e)}")


# Carregar CSS
load_css()

# ------------------ INICIALIZA√á√ÉO DO BANCO DE DADOS ------------------


# Fun√ß√£o para inicializar o banco de dados
@st.cache_resource
def initialize_database():
    """Inicializa o banco de dados se necess√°rio"""
    try:
        # Importar m√≥dulo de inicializa√ß√£o do banco de dados
        from utils.initialize_database import setup_database_schema

        # Configurar esquema do banco de dados
        setup_database_schema()

        return True
    except Exception as e:
        st.error(f"Erro ao inicializar o banco de dados: {str(e)}")
        return False


# Inicializar banco de dados
db_initialized = initialize_database()

# ------------------ INICIALIZA√á√ÉO DO ESTADO DA SESS√ÉO ------------------

# Definir valores padr√£o para o estado da sess√£o
DEFAULT_SESSION_STATE = {
    "authenticated": False,
    "user_id": None,
    "username": None,
    "user_role": None,
    "current_page": "Dashboard",
    "last_activity": datetime.now().isoformat(),
    "page_history": [],
    "selected_client_id": None,
    "selected_briefing_id": None,
    "notifications": [],
    "show_sidebar": True,
    "theme": "light",
    "database_initialized": db_initialized,
}

# Inicializar estado da sess√£o de forma segura
for key, value in DEFAULT_SESSION_STATE.items():
    if key not in st.session_state:
        st.session_state[key] = value

# ------------------ FUN√á√ïES AUXILIARES ------------------


def load_module_safely(module_path):
    """
    Carrega um m√≥dulo Python de forma segura, com tratamento de erros.

    Args:
        module_path: Caminho do m√≥dulo (ex: 'components.sidebar')

    Returns:
        O m√≥dulo carregado ou None se falhar
    """
    try:
        return importlib.import_module(module_path)
    except ImportError as e:
        st.error(f"Erro ao importar m√≥dulo {module_path}: {str(e)}")
        return None
    except Exception as e:
        st.error(f"Erro inesperado ao carregar {module_path}: {str(e)}")
        return None


def update_last_activity():
    """Atualiza o timestamp da √∫ltima atividade do usu√°rio"""
    st.session_state.last_activity = datetime.now().isoformat()


def check_session_timeout():
    """Verifica se a sess√£o expirou por inatividade"""
    if "last_activity" in st.session_state and st.session_state.authenticated:
        last_activity = datetime.fromisoformat(st.session_state.last_activity)
        time_diff = (datetime.now() - last_activity).total_seconds()

        # Sess√£o expira ap√≥s 2 horas de inatividade (7200 segundos)
        if time_diff > 7200:
            logout_user()
            st.warning(
                "Sua sess√£o expirou devido √† inatividade. Por favor, fa√ßa login novamente."
            )
            st.rerun()


def logout_user():
    """Realiza o logout do usu√°rio atual"""
    # Preservar apenas algumas configura√ß√µes para conveni√™ncia
    preserved_settings = {"theme": st.session_state.get("theme", "light")}

    # Limpar o estado da sess√£o
    for key in list(st.session_state.keys()):
        if key not in preserved_settings:
            del st.session_state[key]

    # Restaurar configura√ß√µes preservadas
    for key, value in preserved_settings.items():
        st.session_state[key] = value

    # Garantir que o usu√°rio n√£o est√° autenticado
    st.session_state.authenticated = False


# ------------------ SISTEMA DE AUTENTICA√á√ÉO ------------------


def default_auth():
    """Sistema de autentica√ß√£o simplificado para uso emergencial"""
    st.title("üåê GoNetwork AI - Login (Modo Emerg√™ncia)")

    with st.form("emergency_login"):
        username = st.text_input("Usu√°rio", placeholder="Digite seu nome de usu√°rio")
        password = st.text_input(
            "Senha", type="password", placeholder="Digite sua senha"
        )
        submit = st.form_submit_button("Entrar")

        if submit:
            if username == "admin" and password == "admin":
                st.success("Login bem-sucedido!")
                st.session_state.authenticated = True
                st.session_state.username = "admin"
                st.session_state.user_id = 1
                st.session_state.user_role = "admin"
                st.session_state.last_activity = datetime.now().isoformat()
                st.rerun()
                return True
            else:
                st.error("Credenciais inv√°lidas")
                return False
    return False


# Carregar m√≥dulo de autentica√ß√£o
auth_module = load_module_safely("components.authentication")


# Fun√ß√£o de autentica√ß√£o (com fallback)
def authenticate_user():
    """Autentica o usu√°rio usando o m√≥dulo de autentica√ß√£o ou fallback"""
    # Verificar se j√° est√° autenticado
    if st.session_state.get("authenticated", False):
        update_last_activity()
        return True

    # Tentar usar o m√≥dulo de autentica√ß√£o
    if auth_module and hasattr(auth_module, "authenticate_user"):
        try:
            return auth_module.authenticate_user()
        except Exception as e:
            st.error(f"Erro no sistema de autentica√ß√£o: {str(e)}")

    # Fallback para autentica√ß√£o simples
    st.warning("Usando sistema de autentica√ß√£o de emerg√™ncia")
    return default_auth()


# ------------------ SIDEBAR E NAVEGA√á√ÉO ------------------


# Fun√ß√£o para renderizar sidebar (com fallback)
def render_sidebar():
    """Renderiza a barra lateral com informa√ß√µes do usu√°rio e navega√ß√£o"""
    with st.sidebar:
        try:
            # Tentar carregar o m√≥dulo de sidebar
            sidebar_module = load_module_safely("components.sidebar")
            if sidebar_module and hasattr(sidebar_module, "render_sidebar"):
                sidebar_module.render_sidebar()
                return

            # Implementa√ß√£o de fallback se o m√≥dulo n√£o estiver dispon√≠vel
            st.title("GoNetwork AI")

            # Logo (se dispon√≠vel)
            try:
                st.image("assets/logo_gonetwork.png", width=200)
            except:
                pass

            # Informa√ß√µes do usu√°rio
            st.subheader(f"Ol√°, {st.session_state.username}")

            if st.session_state.user_role == "admin":
                st.write("üëë Administrador")
            elif st.session_state.user_role == "editor":
                st.write("‚úÇÔ∏è Editor")
            else:
                st.write("üë§ Usu√°rio")

            st.divider()

            # Navega√ß√£o r√°pida
            st.subheader("Navega√ß√£o")

            pages = {
                "üìä Dashboard": "Dashboard",
                "üìã Briefings": "Briefings",
                "üóìÔ∏è Timeline": "Timeline",
                "üé¨ Edi√ß√µes": "Edi√ß√µes",
                "üë• Clientes": "Clientes",
                "‚öôÔ∏è Configura√ß√µes": "Configura√ß√µes",
            }

            # Criar bot√µes para navega√ß√£o
            col1, col2 = st.columns(2)
            count = 0
            for label, page in pages.items():
                col = col1 if count % 2 == 0 else col2
                with col:
                    if st.button(label):
                        st.session_state.current_page = page
                        st.rerun()
                count += 1

            st.divider()

            # Op√ß√µes do usu√°rio
            if st.button("üö™ Logout"):
                logout_user()
                st.rerun()

        except Exception as e:
            st.error(f"Erro na sidebar: {str(e)}")

            # Sempre exibir op√ß√£o de logout em caso de erro
            if st.button("üö™ Logout (Emerg√™ncia)"):
                logout_user()
                st.rerun()


# ------------------ CARREGAMENTO DE P√ÅGINAS ------------------


# Fun√ß√£o para carregar e exibir uma p√°gina
def load_and_show_page(page_name):
    """
    Carrega e exibe uma p√°gina espec√≠fica com tratamento de erro.

    Args:
        page_name: Nome da p√°gina a carregar (ex: 'dashboard')
    """
    try:
        # Tentar importar o m√≥dulo da p√°gina
        module_path = f"pages.{page_name.lower()}"
        page_module = load_module_safely(module_path)

        if page_module and hasattr(page_module, "show"):
            # Registrar navega√ß√£o no hist√≥rico
            if st.session_state.current_page not in st.session_state.page_history:
                st.session_state.page_history.append(st.session_state.current_page)

            # Atualizar p√°gina atual
            st.session_state.current_page = page_name

            # Exibir a p√°gina
            with st.spinner(f"Carregando {page_name}..."):
                page_module.show()
            return True

        # Fallback: p√°gina b√°sica se o m√≥dulo n√£o tiver fun√ß√£o show()
        st.title(f"{page_name}")
        st.warning(f"A p√°gina {page_name} est√° em constru√ß√£o.")
        return False

    except Exception as e:
        st.error(f"Erro ao carregar p√°gina {page_name}: {str(e)}")
        st.code(traceback.format_exc(), language="python")

        # P√°gina de emerg√™ncia
        st.title(f"{page_name} - Modo de Emerg√™ncia")
        st.warning("Esta p√°gina est√° em modo de emerg√™ncia devido a um erro.")
        st.write(f"Usu√°rio: {st.session_state.username}")
        st.write(f"Data atual: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
        return False


# ------------------ INTERFACE PRINCIPAL ------------------

# Verificar timeout de sess√£o
check_session_timeout()

# Verificar autentica√ß√£o
if not st.session_state.authenticated:
    authenticate_user()

# Interface principal quando autenticado
if st.session_state.authenticated:
    # Atualizar tempo de atividade
    update_last_activity()

    # Renderizar sidebar
    render_sidebar()

    try:
        # Menu de navega√ß√£o principal (horizontal ou dropdown dependendo da disponibilidade do m√≥dulo)
        pages = [
            "Dashboard",
            "Briefings",
            "Timeline",
            "Edi√ß√µes",
            "Clientes",
            "Relat√≥rios",
            "Configura√ß√µes",
            "Ajuda",
        ]
        icons = [
            "house",
            "file-earmark-text",
            "calendar3",
            "camera-reels",
            "people",
            "graph-up",
            "gear",
            "question-circle",
        ]

        if DEPENDENCIES["streamlit_option_menu"]:
            # Usar option_menu se dispon√≠vel
            selected = option_menu(
                menu_title=None,
                options=pages,
                icons=icons,
                menu_icon="cast",
                default_index=0,
                orientation="horizontal",
            )
        else:
            # Fallback para selectbox
            st.write("### Navega√ß√£o")
            selected = st.selectbox("Selecione uma p√°gina:", pages, index=0)
            st.divider()

        # Carregar a p√°gina selecionada
        load_and_show_page(selected)

    except Exception as e:
        st.error(f"Erro na navega√ß√£o principal: {str(e)}")

        # Interface de emerg√™ncia
        st.title("GoNetwork AI Web - Modo de Emerg√™ncia")
        st.warning(
            "A interface principal encontrou um erro. Usando modo de emerg√™ncia."
        )

        # Menu de navega√ß√£o simplificado
        options = [
            "Dashboard",
            "Briefings",
            "Timeline",
            "Edi√ß√µes",
            "Clientes",
            "Configura√ß√µes",
        ]
        selected = st.selectbox("Selecione uma p√°gina:", options)

        if st.button("Ir para a p√°gina"):
            load_and_show_page(selected)

else:
    # Mensagem para usu√°rios n√£o autenticados
    st.info("Fa√ßa login para acessar a plataforma GoNetwork AI.")

# ------------------ RODAP√â ------------------

# Exibir rodap√©
footer_html = """
<div class="footer">
    <p>¬© 2025 GoNetwork AI - Todos os direitos reservados</p>
    <p>Vers√£o 1.0.0 | <a href="mailto:suporte@gonetwork.com.br">Suporte</a></p>
</div>
"""
st.markdown(footer_html, unsafe_allow_html=True)

# Exibir mensagem de depura√ß√£o se necess√°rio (apenas para desenvolvimento)
debug_mode = False
if debug_mode:
    with st.expander("Informa√ß√µes de Debug"):
        st.write(
            "Estado da Sess√£o:",
            {k: v for k, v in st.session_state.items() if k != "authenticated"},
        )
        st.write("Data e hora atual:", datetime.now().isoformat())
        st.write("Caminho do aplicativo:", os.path.dirname(os.path.abspath(__file__)))
        st.write("Depend√™ncias:", DEPENDENCIES)
